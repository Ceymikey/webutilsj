/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.2.1'
    id 'maven-publish'
}

group = 'dev.ceymikey'
version = '1.0.0'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava
}

publishing {
    repositories {
        maven {
            name = "Webutilsj"
            url = uri("https://maven.pkg.github.com/OWNER/REPOSITORY")
            credentials {
                username = project.findProperty("gpr.user") as String? ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") as String? ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        register<MavenPublication>("gpr") {
            from(components["java"])
        }
    }
}

gradlePlugin {
    website = 'https://github.com/Ceymikey/webutilsj'
    vcsUrl = 'https://github.com/Ceymikey/webutilsj.git'
    plugins {
        websocketj {
            id = 'dev.ceymikey.webutilsj'
            implementationClass = 'dev.ceymikey.webutilsj.Library'
            displayName = 'WebUtilsJ'
            description = 'Websites utilities pack for Java'
            tags.set(['https', 'website', 'utils', 'java'])
        }
    }
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(19)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}